/// Local Data do model Animal
///
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de Animal.
///     save() -> Salva os dados de uma instância do Animal.
///     detail() -> Recupera os detalhes de Animal.
///     update() -> Atualiza os dados de uma instância do Animal.
///     delete() -> Deleta um registro.
///     deleteAll() -> Deleta todos os registros.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:path/path.dart';
import 'package:flutter/foundation.dart';
import 'package:sembast/sembast_io.dart' as smbt_io;
import 'package:sembast/sembast.dart' as smbt;
import 'package:path_provider/path_provider.dart';

import 'model.dart';
import '../../../utils/config.dart';


class $ModelClass$Data {
  $ModelClass$Model _$modelClass$Model = $ModelClass$Model();
  static final $ModelClass$Data _instance = $ModelClass$Data.internal();
  factory $ModelClass$Data() => _instance;
  $ModelClass$Data.internal();

  smbt.Database _db;

  final String _storeName = "$ModelClass$StoreDB";

  /// Método para inicialiar o banco de dados criando a tabela.  
  Future<smbt.Database> initDb() async {
    try {
      var dir = await getApplicationDocumentsDirectory();
      await dir.create(recursive: true);
      var dbPath = join(dir.path, '$project$.db');
      return await smbt_io.databaseFactoryIo.openDatabase(dbPath);
    } catch (error, exception) {
      debugPrint(
          "Erro no método initDB -> error: $error, message: $exception");
    }
    return null;
  }

  /// Método para recuperar todos os dados de $ModelClass$
  ///
  /// returns:
  ///   Instância do $ModelClass$Model
  Future<List<$ModelClass$Model>> fetchAll() async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      var _data = await _store.find(_db);
      return _data.map((snapshot){
        return $ModelClass$Model.fromMap(snapshot.value);
      }).toList();
    } catch (e) {
      return null;
    } finally {
      _db.close();
    }
  }

  /// Método para recuperar o primeiro registro de $ModelClass$
  ///
  /// returns:
  ///   Instância do $ModelClass$Model
  Future<$ModelClass$Model> get(int id) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      var _data = await _store.findFirst(_db);
      return $ModelClass$Model.fromMap(_data.value);
    } catch (e) {
      return null;
    } finally {
      _db.close();
    }
  }

  /// Método para salvar localmente um(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> save($ModelClass$Model $modelClass$) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      // Salvando o dado do novo $modelClass$
      await _store.add(_db, $modelClass$.toMap());
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  /// Método para deletar todos os registros do(a) $ModelClass$
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> deleteAll() async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      // Apagando todos os registros anteriores
      await _store.delete(_db);
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  /// Método para deletar um registro do(a) #@AppName@#
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> delete(int id) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      await _store.delete(_db);
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  /// Método para deletar um registro do(a) #@AppName@#
  ///
  /// returns:
  ///    bool -> true salvo com sucesso, false ocorreu um erro
  Future<bool> update($ModelClass$Model $modelClass$) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      final finder = smbt.Finder(filter: smbt.Filter.byKey($modelClass$.id));
      await _store.update(
        _db,
        $modelClass$.toMap(),
        finder: finder,
      );
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }
}
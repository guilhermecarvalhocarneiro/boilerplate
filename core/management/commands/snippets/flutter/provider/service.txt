/// Service do model $ModelClass$
/// 
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de $ModelClass$ da API.
///     detail()   -> Recupera os detalhes de $ModelClass$ da API.
///     post()     -> Salva os dados de uma instância do $ModelClass$ na API.
///     put()      -> Atualiza os dados de uma instância do $ModelClass$ na API.
///     delete()   -> Deleta os dados de uma instância do $ModelClass$ na API.
///
/// Os métodos de acesso à API devem ser implementados no nessa classe.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

import 'model.dart';
import '../../../utils/config.dart';
import '../../../utils/custom_dio.dart';
import '../../../utils/util.dart';

class $ModelClass$Service {
  String _uri = "$App$/$Model$/";
  $ModelClass$Model _$ModelClassCamelCase$ = $ModelClass$Model();
  List<$ModelClass$Model> _$ModelClassCamelCase$List = List<$ModelClass$Model>();

  $ModelClass$Service({$ModelClass$Model $ModelClassCamelCase$, List<$ModelClass$Model> $ModelClassCamelCase$List}) {
    if ($ModelClassCamelCase$ != null) _$ModelClassCamelCase$ = $ModelClassCamelCase$;
  }

  Future<List<$ModelClass$Model>> fetchAll() async {
    try {
      String _url;
      _$ModelClassCamelCase$List?.clear();
      final CustomDio _dio = CustomDio(_url);
      _dio.makeHeadersAuthentication();
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next = dataResponse.containsKey('nextUrl') ? dataResponse["next"] : "";
        final String _previous = dataResponse.containsKey('previousUrl') ?dataResponse["previous"]: "";
        final _dataItens = dataResponse.containsKey('results')? dataResponse["results"]: dataResponse;
        for (var data in _dataItens) {
          $ModelClass$Model _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
          _$ModelClassCamelCase$.nextUrl = _next;
          _$ModelClassCamelCase$.previousUrl = _previous;
          _$ModelClassCamelCase$List.add(_$ModelClassCamelCase$);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _$ModelClassCamelCase$List;
  }

  Future<List<$ModelClass$Model>> getMorel(String uri) async {
    try {
      final CustomDio _dio = CustomDio(uri);
      _dio.makeHeadersAuthentication();
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next = dataResponse.containsKey('nextUrl') ? dataResponse["next"] : "";
        final String _previous = dataResponse.containsKey('previousUrl') ?dataResponse["previous"]: "";
        final _dataItens = dataResponse.containsKey('results')? dataResponse["results"]: dataResponse;
        for (var data in _dataItens) {
          $ModelClass$Model _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
          _$ModelClassCamelCase$.nextUrl = _next;
          _$ModelClassCamelCase$.previousUrl = _previous;
          _$ModelClassCamelCase$List.add(_$ModelClassCamelCase$);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _$ModelClassCamelCase$List;
  }
  
  Future<$ModelClass$Model> detail($ModelClass$Model $ModelClassCamelCase$) async {
    _uri += "${$ModelClassCamelCase$.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final data = await _dio.getHttp();
      if (data != null) {
        _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _$ModelClassCamelCase$;
  }
  
  Future<$ModelClass$Model> post($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = FormData.fromMap($ModelClassCamelCase$.toJson());
      final data = await _dio.postHttp(_data);
      if (data != null) {
        _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _$ModelClassCamelCase$;
  }

  Future<$ModelClass$Model> put($ModelClass$Model $ModelClassCamelCase$) async {
    _uri += "${$ModelClassCamelCase$.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = FormData.fromMap($ModelClassCamelCase$.toJson());
      final data = await _dio.putHttp(_data, $ModelClassCamelCase$.id.toString());
      if (data != null) {
        _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _$ModelClassCamelCase$;
  }

  Future<$ModelClass$Model> patch($ModelClass$Model $ModelClassCamelCase$) async {
    _uri += "${$ModelClassCamelCase$.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = FormData.fromMap($ModelClassCamelCase$.toJson());
      final data = await _dio.patchHttp(_data);
      if (data != null) {
        _$ModelClassCamelCase$ = $ModelClass$Model.fromJson(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _$ModelClassCamelCase$;
  }

  Future<bool> delete($ModelClass$Model $ModelClassCamelCase$) async {
    _uri += "${$ModelClassCamelCase$.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = FormData.fromMap($ModelClassCamelCase$.toJson());
      final data = await _dio.deleteHttp(_data, $ModelClassCamelCase$.id.toString());
      if (data != null) {
        return true;
      }
      return false;
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
      return false;
    }
  }

  void _success(String message, {int statusCode}) async {
    try {
      debugPrint(message);
    } catch (e) {
      debugPrint("Ocorreu um erro no método error: $e");
    }
  }

  void _error(String error, String exception, {int statusCode}) async {
    try {
      debugPrint("Ocorreu o erro: $error");
    } catch (e) {
      debugPrint("Ocorreu um erro no método error: $e");
    }
  }
}
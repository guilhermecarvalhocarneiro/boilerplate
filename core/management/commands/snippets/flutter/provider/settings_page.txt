
/// Page/View para controle das configurações da App.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import './model.dart';
import '../../user_interface/widget.dart';
import '../../utils/localization.dart';

class SettingsIndexPage extends StatefulWidget {
  @override
  _SettingsIndexPageState createState() => _SettingsIndexPageState();
}

class _SettingsIndexPageState extends State<SettingsIndexPage> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(AppLocalizations.of(context).translate("page_label_configuration")),
        centerTitle: true,
      ),
      body: _buildBody()
    );
  }

  Widget _buildBody(){
    final _settings = Provider.of<SettingsProvider>(context);
    return Container(
        height: 300,
        color: _settings.lightTheme == true? Colors.white: Colors.black,
      child: Center(
        child: Column(
          children: <Widget>[
            Container(
              height: 60,
              width: MediaQuery.of(context).size.width * .9,
              child: customButtonOutline(
                borderColor: Colors.red,
                textColor: Colors.red,
                rounded: true,
              label: "Dark",
              onPress: () {
                _settings.setDarkTheme();
              },
              context: context),
            ),
            Container(
              height: 60,
              width: MediaQuery.of(context).size.width * .9,
              child: customButtonOutline(
                borderColor: Colors.white,
                textColor: Colors.white,
                rounded: true,
              label: "Light",
              onPress: () {
                _settings.setLightTheme();
              },
              context: context),
            ),
          ],
        )
      ),
    );
  }

  /// Método para mostrar/ocultar a barra de mensagem para o usuário
  ///    Params:
  ///      message -> String contendo a mensagem a ser mostrada.
  ///      error -> bool para determinar se a mensagem é de erro ou não.
  _showMessage(String message, {bool error}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: error == true ? Colors.red : Colors.blue,
        ),
      );
    });
  }
}

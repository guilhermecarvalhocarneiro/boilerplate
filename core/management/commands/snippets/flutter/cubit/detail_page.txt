
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../user_interface/font.dart';
import '../../../../user_interface/widget.dart';
import '../../../../utils/localization.dart';
import '../../../../utils/config.dart';
import '../../../../utils/util.dart';
import '../model.dart';
import '../cubit.dart';
import 'update.dart';

class $ModelClass$DetailPage extends StatefulWidget {
  final $ModelClass$Model $ModelClassCamelCase$Model;

  const $ModelClass$DetailPage({Key key, this.$ModelClassCamelCase$Model})
      : super(key: key);

  @override
  _$ModelClass$DetailPageState createState() => _$ModelClass$DetailPageState();
}

class _$ModelClass$DetailPageState extends State<$ModelClass$DetailPage> 
  with SingleTickerProviderStateMixin{

  $ModelClass$Model _$ModelClassCamelCase$Model;
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  AnimationController _animationController;

  $ModelClass$Model _$Model$ = $ModelClass$Model();

  @override
  void initState() {
    super.initState();
    this._$ModelClassCamelCase$Model = widget.$ModelClassCamelCase$Model;
    _animationController = AnimationController(vsync: this);
  }

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<$ModelClass$Cubit, $ModelClass$State>(
      listener: (context, state) {
        if (state is $ModelClass$ErrorState){
          _showMessage(state.error, error: true);
          debugPrint("DebugError: No método buildPage do AppNameAddPage  -> ${state.error}");
        }
        if(state is $ModelClass$SuccessState){
          _showMessage(state.successMessage);
          debugPrint("DebugSuccess: No método build do AppNameDetailPage -> ${state.successMessage}");
        }
      },
      builder: (context, state) {
        _$Model$ = context.bloc<$ModelClass$Cubit>().$Model$Model;
        return Scaffold(
          key: _scaffoldKey,
          extendBodyBehindAppBar: true,
          appBar: AppBar(backgroundColor: Colors.transparent),
          body: _buildBody(),
          floatingActionButton: FloatingActionButton(
            child: Icon(
              Icons.update,
            ),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => $ModelClass$UpdatePage(),
                ),
              );
            },
          ),
        );
      },
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return SingleChildScrollView(
      child: Container(
        height: MediaQuery.of(context).size.height,
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(
                    context, Config.marginHead),
             ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Text(_$Model$.toString()),
            ],
          ),
        ),
      ),
    );
  }

  _showMessage(String message, {bool error}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: error == true ? Colors.red : Colors.blue,
        ),
      );
    });
  }

  _makeToast(String texto, {erro = false, altura = 80.0}) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }
}
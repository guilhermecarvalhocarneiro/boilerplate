/// Os Métodos padrões gerados são:
///   Métodos da API
///     fecth() -> Recupera a lista de $ModelClass$.
///     reload() -> Recarrega a lista de $ModelClass$.
///     detail() -> Recupera os detalhes de um $ModelClass$.
///     post() -> Salva um novo $ModelClass$.
///     put() -> Atualiza os dados de um $ModelClass$.
///     delete() -> Deleta um $ModelClass$.

///   Métodos do Data
///     fetchLocal() -> Recupera a lista de $ModelClass$
///     reloadLocal() -> Recarrega a lista de $ModelClass$
///     detailLocal() -> Recupera os detalhes de um $ModelClass$
///     saveLocal() -> Salva um novo $ModelClass$
///     updateLocal() -> Atualiza um novo $ModelClass$
///     deleteLocal() -> Deleta um novo $ModelClass$
///     deleteAllLocal() -> Deleta um novo $ModelClass$

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'model.dart';
import 'service.dart';
import 'data.dart';

part 'state.dart';

class $ModelClass$Cubit extends Cubit<$ModelClass$State> {
  $ModelClass$Service _service;
  $ModelClass$Data _data;
  $ModelClass$Model $ModelClassCamelCase$Model;
  List<$ModelClass$Model> $ModelClassCamelCase$List;

  $ModelClass$Cubit() : super($ModelClass$Initial()) {
    _service = $ModelClass$Service();
  }

  Future<void> fetch() async {
    try {
      emit($ModelClass$ProcessState());
      $ModelClassCamelCase$List = await _service.fetch();
      emit(
        $ModelClass$SuccessState(
            successMessage: "Dados carregados com sucesso.",
            $ModelClassCamelCase$List: $ModelClassCamelCase$List,
        ),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }

  Future<void> reload() async {
    // TODO Implementar consulta ao servico e tratamento do retorno
    try {
      emit($ModelClass$ProcessState());
      emit($ModelClass$SuccessState(
        successMessage: "Dados carregados com sucesso."),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }

  Future<void> post($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
       $ModelClassCamelCase$Model = await _service.post($ModelClassCamelCase$);
      emit($ModelClass$SuccessState(
        successMessage: "Dados salvos com sucesso."),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }

  Future<void> put($ModelClass$Model $ModelClassCamelCase$) async {
    try {
      emit($ModelClass$ProcessState());
      $ModelClassCamelCase$Model = await _service.put($ModelClassCamelCase$);
      emit($ModelClass$SuccessState(
        successMessage: "Dado atualizado com sucesso."),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }

  Future<void> patch($ModelClass$Model $ModelClassCamelCase$) async {
    // TODO Implementar consulta ao servico e tratamento do retorno
    try {
      emit($ModelClass$ProcessState());
      emit($ModelClass$SuccessState(
        successMessage: "Dado atualizado com sucesso."),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }

  Future<void> delete($ModelClass$Model $ModelClassCamelCase$) async {
    // TODO Implementar consulta ao servico e tratamento do retorno
    try {
      emit($ModelClass$ProcessState());
      emit($ModelClass$SuccessState(
        successMessage: "Dado deletado com sucesso."),
      );
    } catch (e) {
      emit($ModelClass$ErrorState(e.toString()));
    }
  }
}

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'detail.dart';
import 'create.dart';
import '../model.dart';
import '../cubit.dart';
import '../../../../utils/util.dart';
import '../../../../utils/config.dart';
import '../../../../utils/localization.dart';
import '../../../../user_interface/font.dart';
import '../../../../user_interface/widget.dart';

class $ModelClass$ListPage extends StatefulWidget {
  @override
  $ModelClass$ListPageState createState() => $ModelClass$ListPageState();
}

class $ModelClass$ListPageState extends State<$ModelClass$ListPage>
  with SingleTickerProviderStateMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  AnimationController _animationController;
  List<$ModelClass$Model> _$Model$List = List<$ModelClass$Model>();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
    _loadData();
  }

  @override
  Widget build(BuildContext context) {
    String _title = "$ModelClass$";
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
      ),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.push(context, MaterialPageRoute(builder: (_) => $ModelClass$AddPage()));
        },
      ),
    );
  }

    Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return Container(
      alignment: FractionalOffset.topLeft,
      child: RefreshIndicator(
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              _listBuilder(),
            ],
          ),
        ),
        onRefresh: _refresh,
      ),
    );
  }

  _listBuilder() {
    return BlocConsumer<$ModelClass$Cubit, $ModelClass$State>(
      listener: (context, state) {
        if (state is $ModelClass$ErrorState){
          _showMessage(state.error, error: true);
        }
        if(state is $ModelClass$SuccessState){
          _showMessage(state.successMessage);
        }
      },
      builder: (context, state) {
        final _$ModelClassCamelCase$Cubit = context.bloc<$ModelClass$Cubit>();
        if (state is $ModelClass$ProcessState) {
          return customProcessingCardModalCenter(context);
        }
        return _$ModelClassCamelCase$Cubit.$ModelClassCamelCase$List == null 
           ? Container() 
           : Expanded(
            child: Container(
             margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(
                    context, Config.marginHead),
             ),
             child: ListView.builder(
              itemCount: _$ModelClassCamelCase$Cubit.$ModelClassCamelCase$List.length,
              itemBuilder: (context, index) {
                $ModelClass$Model _$ModelClassCamelCase$ = _$ModelClassCamelCase$Cubit.$ModelClassCamelCase$List[index];
                return GestureDetector(
                  onTap: () {
                    _$ModelClassCamelCase$Cubit.$ModelClassCamelCase$Model = _$ModelClassCamelCase$;
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => $ModelClass$DetailPage(),
                      ),
                    );
                  },
                  child: customCard(
                    context: context,
                    child: Text(_$ModelClassCamelCase$.toString()),
                  ),
                );
              },
            )
          )
        );
      },
    );
  }


  Future _refresh() async {
    try {
    // TODO implementar o método de refresh da tela
    } catch (error) {

    }
  }

  _showMessage(String message, {bool error}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: error == true ? Colors.red : Colors.blue,
        ),
      );
    });
  }

  _makeToast(String texto, {erro = false, altura = 80.0}) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }

  Future<void> _loadData() async {
    final _$ModelClassCamelCase$Cubit = context.bloc<$ModelClass$Cubit>();
    await _$ModelClassCamelCase$Cubit.fetch();
  }
}
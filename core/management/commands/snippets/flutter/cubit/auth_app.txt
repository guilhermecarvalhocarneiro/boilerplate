/// Cubit do model Auth

/// As regras de negócio devem ser implementadas nesse arquivo evitando ao máximo
/// de serem implementadas nos arquivos das views/pages.
///
/// Os métodos de acesso à API devem ser implementados no Service.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

import 'model.dart';
import 'service.dart';

part 'state.dart';

class AuthCubit extends Cubit<AuthState> {

  AuthService _service;
  AuthModel _user;

  AuthCubit() : super(AuthInitial()) {
    _service = AuthService();
  }

  Future<void> signUpUser(int typeUser) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }

  Future<void> signUpUserFirebase(String url) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }

  Future<void> signIn(String login, String password) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }

  Future<void> login(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> logout(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> changePassword(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> recoverPassword(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> createAccount(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> disableAccount(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }
  
  Future<void> excludeAccount(AuthModel auth) async {
    try {
      emit(AuthProcessState());

      emit(AuthSuccessState());
    } catch (e) {
      emit(AuthErrorState(e.toString()));
    }
  }

}
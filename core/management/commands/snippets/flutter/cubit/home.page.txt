/// Página inicial da APP.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked
/// 
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:connectivity/connectivity.dart';
import 'apps/configuracao/cubit.dart';
import 'user_interface/widget.dart';
import 'utils/config.dart';
import 'utils/localization.dart';

$ImportViews$

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

/// Caso deseje ativar a pela barra inferior BottomNavigationBar deve-se setar a
/// variável [bottomNavigationEnable], depois criar as páginas que serão invocadas quando o usuário
/// clicar nos elementos e vinculas à lista de páginas disponíveis conforme exemplo  seguir
///
///     _pages = [PaginaUm(), PaginaDois(), PaginaTres(), ..., PaginaN()]
///
/// lembre-se que a quantidade de páginas deve ser igual à quantidade de filhos do parâmetro
/// items do BottomNavigationBar, também é necessário alterar o valor passado para o body, que
/// que deve ser _currentPage.
///

class _MyHomePageState extends State<MyHomePage> {
  PageController _pageController;
  bool bottomNavigationEnable = false;
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  // Declarando o inteiro para controlar qual página deve ser exibida
  int _currentPageIndex;

  /// Criando uma GlobalKey para uma página filha do CupertinoTabBar que deve
  /// ser utilizada para controlar de forma individualizada o fluxo de navegação
  /// mantendo a posição quando o usuário trocar de Tab no CupertinoTabBar
  /// Exemplo:
  ///    [final GlobalKey<NavigatorState> childPageNavKey = GlobalKey<NavigatorState>();]


  // Declarando uma instancia da Classe dos items do Menu
  final Itens _itensMenuGridView = Itens();

  // Declarando a lista de Widgets que devem conter as páginas no caso de ser configurada
  // por meu do bottomNavigationBar
  List<Widget> _pages;

  @override
  void initState() {
    super.initState();
    _currentPageIndex = 0;
    SchedulerBinding.instance.addPostFrameCallback(
      (_) {
        _itensMenuGridView.make();
      },
    );
    /// Adicionar na listagem abaixo as páginas que serão filhas do CupertinoTabBar
    _pages = []
  }

  @override
  void didChangeDependencies() {
    // Verificando se ocorreu alteração na conectividade do device
    subscription = Connectivity().onConnectivityChanged.listen(
      (ConnectivityResult result) {
        if (result.toString().contains("ConnectivityResult.none") == false) {
          _utilController.sendEmergencyLocalPost(_userController.model);
        }
      },
    );
    super.didChangeDependencies();
  }

  @override
  void dispose(){
    subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _willPopScope,
      child: SafeArea(
        child: Scaffold(
          extendBodyBehindAppBar: true,
          appBar: AppBar(
            actions: _buildAction(context),
            backgroundColor: Colors.transparent,
          ),
          body: _buildGridView(context),
          bottomNavigationBar: _buildBottomNavigationBar(context),
        ),
      ),
    );
  }

  Future<bool> _wilPopScope() async {
    /// Exemplo de bloco de controle do que deve ocorrer quando usuário 
    /// clicar no botão de retorno do dispositivo
    /// 
    ///  switch (_currentPageIndex) {
    ///   case 0:
    ///     if (childPageNavKey.currentState.canPop()) {
    ///       childPageNavKey.currentState.pop();
    ///     }
    ///     break;
    ///   case N:
    ///     ...
    ///   default:
    ///     return false;
    /// }
    return false;
  }

  List<Widget> _buildAction(BuildContext context) {
    return [
      IconButton(
          icon: Icon(Icons.settings),
          tooltip: AppLocalizations.of(context)
              .translate("page_label_configuration"),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (_) => SettingsIndexPage()),
            );
          }),
    ];
  }

  Widget _buildGridView(BuildContext context) {
    return Stack(children: <Widget>[
      HeadWidget(),
      ContentWidget(
        widgetChild: GridView.count(
          crossAxisCount: 2,
          children: List.generate(_itensMenuGridView.list.length, (index) {
            return Center(
              child: GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          _itensMenuGridView.list[index].geturi(),
                    ),
                  );
                },
                child: BlocConsumer<SettingsCubit, SettingsState>(
                  listener: (context, state){},
                  builder:
                      (context, state) {
                    return customMainCardButton(
                      _itensMenuGridView.list[index].icon,
                      _itensMenuGridView.list[index].title,
                      iconColor: context.bloc<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightIconColor
                          : CustomTheme.mainCardDarkIconColor,
                      textColor: context.bloc<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightTextColor
                          : CustomTheme.mainCardDarkTextColor,
                      cardBackgroundColorBegin:
                          context.bloc<SettingsCubit>().lightTheme == true
                              ? CustomTheme.mainCardLightBackgroundColor
                              : CustomTheme.mainCardDarkBackgroundColor,
                      cardBackgroundColorEnd:
                          context.bloc<SettingsCubit>().lightTheme == true
                              ? CustomTheme.mainCardLightBackgroundColor
                              : CustomTheme.mainCardDarkBackgroundColor,
                      boxShadowColor: context.bloc<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightShadowColor
                          : CustomTheme.mainCardDarkShadowColor,
                      cardBorderColor: context.bloc<SettingsCubit>().lightTheme == true
                          ? CustomTheme.mainCardLightBackgroundColor
                          : CustomTheme.mainCardDarkBackgroundColor,
                    );
                  },
                ),
              ),
            );
          }),
        ),
      )
    ]);
  }

  /// Método para construir a barra de navegação inferior
  /// utilizando o componente CupertinoTabScaffold
  Widget _buildBottomNavigationBar(BuildContext context) {
    if (bottomNavigationEnable == false){
      return Container();
    } 
    return CupertinoTabScaffold(
      tabBar: CupertinoTabBar(
          onTap: (index) {
            _indexCurrentPage = index;
          },
          activeColor: Colors.blueAccent,
          inactiveColor: Colors.blue,
          items: [
            BottomNavigationBarItem(
              label: "Legenda do Item",
              // Icone mostrado quando o item não está selecionado
              icon: Icon(Icons.home_outlined), 
              // Icone motrado quando o item está selecioando
              activeIcon: Icon(Icons.home_outlined), 
            ),
          ]),
      tabBuilder: (context, index) {
        return Container();
        // switch (index) {
        //   case 0:
        //     return CupertinoTabView(
        //       navigatorKey: childPageNavKey,
        //       builder: (context) {
        //         return CupertinoPageScaffold(child: _pages[0]);
        //       },
        //     );
        //     break;
        //   default:
        //     return CupertinoTabView(
        //       navigatorKey: childPageNavKey,
        //       builder: (context) {
        //         return CupertinoPageScaffold(child: _pages[0]);
        //       },
        //     );
        // }
      },
    );
  }
}

class Itens {
  final String title;
  final IconData icon;
  final Widget uri;
  final Image imageIcon;

  Itens({this.title, this.icon, this.uri, this.imageIcon});

  List<Itens> list = [];

  void make() {
    // Exemplo de inserção de uma imagem do Assets como Card
    // list.add(Itens(
    //     title: 'arquivo importacao',
    //     icon: null,
    //     imageIcon: Image.asset("assets/icons/icons8-calendar-500.png",
    //         width: MediaQuery.of(context).size.width / 4, color: Colors.red),
    //     uri: Container()));

    $ItenMenu$
  }

  Widget geturi() => uri;
}

/*
 * Copyright (c) 2020.
 *
 * Desenvolvido por Nuvols Consultoria em TI
 * 
 * Analista Responsável
 * Guilherme de Carvalho Carneiro
 * guilherme.carvalho@nuvols.com.br
 *
 * http://www.nuvols.com.br
 * falecom@nuvols.com.br
 */

import 'dart:async';

import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';

import 'config.dart';

class CustomDio {
  Dio _dio;
  String _url;
  // ignore: unused_field
  String _errorMessage =
      "Ocorreu um erro ao executar a consulta, favor tentar novamente.";

  CustomDio(
    String url, {
    String authenticationToken,
    String errorMessage,
    String token,
    String contentType = "application/json; charset=utf-8",
  }) {
    _url = _url = "${Config.uri}$url";

    BaseOptions options = new BaseOptions(
        baseUrl: url,
        connectTimeout: 5000,
        receiveTimeout: 5000,
        headers: {
          'Authorization':
              token != null ? '$token' : '${Config.DRFToken}'
        });
    _dio = Dio(options);
    _dio.interceptors.add(CustomDioInterceptor());

    if (errorMessage != null && errorMessage.isNotEmpty) {
      _errorMessage = errorMessage;
    }
  }

  Future<dynamic> getHttp({returnResult = false, String uri}) async {
    try {
      Response _response = await _dio.get(uri ?? _url);
      if (_response.statusCode == 200) {
        if (returnResult) return _response.data["results"];

        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      debugPrint("DebugError: No método get do Dio -> $error | " +
          "\nResponse:${error.response.data.toString()} \nRequest: ${error.request.uri} " +
          "\nHeader: ${error.request.headers.toString().replaceAll(",", "\n    ")} \nData: ${error.request.data.toString()}");

      return null;
    }
  }

  Future<dynamic> postHttp(data, {String uri}) async {
    try {
      Response _response = await _dio.post(uri ?? _url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      debugPrint("DebugError: No método post do Dio -> $error |" +
          "\nResponse:${error.response.data.toString()} \nRequest: ${error.request.uri} " +
          "\nHeader: ${error.request.headers.toString().replaceAll(",", "\n    ")} \nData: ${error.request.data.toString()}");
    }
  }

  Future<dynamic> putHttp(data, String id, {String uri}) async {
    try {
      Response _response = await _dio.put(_url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      debugPrint("DebugError: No método put do Dio -> $error | " +
          "\nResponse:${error.response.data.toString()} \nRequest: ${error.request.uri} " +
          "\nHeader: ${error.request.headers.toString().replaceAll(",", "\n    ")} \nData: ${error.request.data.toString()}");
    } catch (errorGeneral) {
      debugPrint("Erro geral: $errorGeneral");
    }
  }

  Future<dynamic> patchHttp(data, {String uri}) async {
    try {
      Response _response = await _dio.patch(_url, data: data);
      if (_response.statusCode == 201 || _response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      debugPrint("DebugError: No método patch do Dio -> $error |" +
          "\nResponse:${error.response.data.toString()} \nRequest: ${error.request.uri} " +
          "\nHeader: ${error.request.headers.toString().replaceAll(",", "\n    ")} \nData: ${error.request.data}");

      return null;
    }
  }

  Future<dynamic> deleteHttp(data, String id, {String uri}) async {
    try {
      Response _response = await _dio.delete(_url, data: data);
      if (_response.statusCode == 200 || _response.statusCode == 204) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
      debugPrint("DebugError: No método delete do Dio -> $error | " +
          "\nResponse:${error.response.data.toString()} \nRequest: ${error.request.uri} " +
          "\nHeader: ${error.request.headers.toString().replaceAll(",", "\n    ")} \nData: ${error.request.data.toString()}");

      return null;
    }
  }
}

class CustomDioInterceptor extends Interceptor {
  @override
  Future onRequest(RequestOptions options) {
    options.connectTimeout = 50000;
    options.receiveTimeout = 50000;
    return super.onRequest(options);
  }

  @override
  Future onResponse(Response response) {
    return super.onResponse(response);
  }

  @override
  Future onError(DioError err) {
    return super.onError(err);
  }
}

/// Página inicial da APP.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:get_it/get_it.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_mobx/flutter_mobx.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

import 'utils/config.dart';
import 'utils/localization.dart';
import 'user_interface/font.dart';
import 'apps/auth/controller.dart';
import 'user_interface/widget.dart';
import 'utils/process.controller.dart';

$ImportViews$
$ImportController$

// Variável para controlar o idioma padrão da App
String currentLanguage = "";

void main() {
    /// Criando uma instância do Get_it para trabalhar
    /// com injeção de dependência
    GetIt getIt = GetIt.instance;

    // Registrando o controller do ProcessController
    getIt.registerSingleton<ProcessController>(ProcessController());

    // Registrando o controller do Auth
    getIt.registerSingleton<AuthController>(AuthController());

    /// Registrando os controllers dos Models utiliznado o getIt
    $RegisterControllers$

    runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    // Recuperando o controller SettingsController
    SettingsController _controller = GetIt.I<SettingsController>();

    /// Configurando a cor da barra de status do device
    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark.copyWith(
      statusBarColor: Colors.transparent
    ));
    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.light.copyWith(
      statusBarColor: Colors.transparent
    ));
    return Observer(builder: (_) {
      return MaterialApp(
        title: '${Config.app_title}',
        theme: _controller.lightTheme == true
            ? CustomTheme.lightTheme
            : CustomTheme.darkTheme,
        home: MyHomePage(title: '${Config.app_title}'),
        /// Área para internacionalização
        // Configurando quais idiomas serão suportados, por padrão pt_BR e en_US
        supportedLocales: [
          Locale('en', 'US'),
          Locale('pt', 'BR'),
        ],
        // These delegates make sure that the localization data for the proper language is loaded
        localizationsDelegates: [
          // A class which loads the translations from JSON files
          AppLocalizations.delegate,
          // Built-in localization of basic text for Material widgets
          GlobalMaterialLocalizations.delegate,
          // Built-in localization for text direction LTR/RTL
          GlobalWidgetsLocalizations.delegate,
        ],
        // Returns a locale which will be used by the app
        localeResolutionCallback: (locale, supportedLocales) {
          // Check if the current device locale is supported
          for (var supportedLocale in supportedLocales) {
            if (supportedLocale.languageCode == locale.languageCode &&
                supportedLocale.countryCode == locale.countryCode) {
              currentLanguage = supportedLocale.toString();
              return supportedLocale;
            }
          }
          // If the locale of the device is not supported, use the first one
          // from the list (English, in this case).
          return supportedLocales.first;
        },
        /// fim da área de internacionalização
        debugShowCheckedModeBanner: false,
      );
    });
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

/// Caso deseje ativar a pela barra inferior BottomNavigationBar deve-se setar a 
/// variável [bottomNavigationEnable], depois criar as páginas que serão invocadas quando o usuário
/// clicar nos elementos e vinculas à lista de páginas disponíveis conforme exemplo  seguir
/// 
///     _pages = [PaginaUm(), PaginaDois(), PaginaTres(), ..., PaginaN()]
/// 
/// lembre-se que a quantidade de páginas deve ser igual à quantidade de filhos do parâmetro
/// items do BottomNavigationBar, também é necessário alterar o valor passado para o body, que 
/// que deve ser _currentPage.
/// 
class _MyHomePageState extends State<MyHomePage> {
  // Recuperando o controller SettingsController
  SettingsController _controller = GetIt.I<SettingsController>();
  
  // Declarando o booleano que controla se será mostrado o ButtonNavigationBar
  bool bottomNavigationEnable = false;

    // Declarando o PageController para pelo ButtonNavigationBar
  PageController _pageController;

  // Declarando o inteiro para controlar qual página deve ser exibida
  int _page = 0;

  // Declarando uma instancia da Classe dos items do Menu
  final Itens _itensMenuGridView = Itens();

  // Declarando a lista de Widgets que devem conter as páginas no caso de ser configurada
  // por meu do bottomNavigationBar
  List<Widget> _pages;

  /// Declarando o Widget da página atual para o caso de ser configurado a 
  /// por meio do ButtonNavigationBar
  Widget _currentPage;

  /// Sobrescrevendo o initState para caso seja configurada a 
  /// pelo ButtonNavigationBar sejam instânciadas as variáveis de controle
  /// da 
  @override
  void initState(){
    _itensMenuGridView.make();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    // Verificando se a será pelo navigationButton
      return Scaffold(
        extendBodyBehindAppBar: true,
        appBar: AppBar(
          //title: customAppBarTitle(
          //  context, 
          //  widget.title,
          // ),
          actions: _buildAction(context),
          backgroundColor: Colors.transparent,
        ),
        body: _buildGridView(context),
        bottomNavigationBar: _buildBottomNavigationBar(context)
      );
  }

  /// Widget para criar as ações da AppBar
  List<Widget> _buildAction(BuildContext context){
    return [
      IconButton(
        icon: Icon(Icons.settings),
        tooltip: AppLocalizations.of(context).translate("page_label_configuration"),
        onPressed: () {
          Navigator.push(
            context, 
            MaterialPageRoute(builder: (_) => SettingsIndexPage()),
          );
        }),
    ];
  }
  Widget _buildGridView(context) {
    return Stack(children: <Widget>[
      HeadWidget(),
      ContentWidget(
        widgetChild: GridView.count(
          crossAxisCount: 2,
          children: List.generate(_itensMenuGridView.list.length, (index) {
            return Center(
              child: GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => _itensMenuGridView.list[index].geturi(),
                    ),
                  );
                },
                child: customMainCardButton(
                  _itensMenuGridView.list[index].icon,
                  _itensMenuGridView.list[index].title,
                  iconColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightIconColor
                      : CustomTheme.mainCardDarkIconColor,
                  textColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightTextColor
                      : CustomTheme.mainCardDarkTextColor,
                  cardBackgroundColorBegin: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                  cardBackgroundColorEnd: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                  boxShadowColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightShadowColor
                      : CustomTheme.mainCardDarkShadowColor,
                  cardBorderColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                ),
              ),
            );
          }),
        ),
      )
    ]);
  }

  /// Widget para criar o BottomNavigationBar. Caso o valor do bottomNavigationEnable
  /// seja false é retornado um null para não "desenhar" nada na tela.
  Widget _buildBottomNavigationBar(BuildContext context) {
    if (bottomNavigationEnable == false) return null;
    return Theme(
      data: Theme.of(context).copyWith(
        // sets the background color of the `BottomNavigationBar`
        canvasColor: Theme.of(context).primaryColor,
        // sets the active color of the `BottomNavigationBar` if `Brightness` is light
        primaryColor: Theme.of(context).accentColor,
        textTheme: Theme.of(context).textTheme.copyWith(
              caption: TextStyle(color: Colors.grey[500]),
            ),
      ),
      child: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(
              Icons.home,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.favorite,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.supervised_user_circle,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.grid_on,
            ),
            title: Container(height: 0.0),
          ),
        ],
        onTap: _navigationTapped,
        currentIndex: _page,
      ),
    );
  }

  /// Método para controlar a das páginas
  /// conforme o clique nos elementos do ButtonNavigationBar
  _navigationTapped(int page) {
    setState((){
      _page = page;
      _currentPage = _pages[_page];
    });
  }
}

/// Classe dos itens do ListView
class Itens {
  final String title;
  final IconData icon;
  final Widget uri;
  final Image imageIcon;

  Itens({this.title, this.icon, this.uri, this.imageIcon});

  List<Itens> list = [];

  void make() {
    // Exemplo de inserção de uma imagem do Assets como Card
    // list.add(Itens(
    //     title: 'arquivo importacao',
    //     icon: null,
    //     imageIcon: Image.asset("assets/icons/icons8-calendar-500.png",
    //         width: MediaQuery.of(context).size.width / 4, color: Colors.red),
    //     uri: Container()));
    list.add(Itens(
        title: 'Item 01',
        icon: FontAwesomeIcons.folderOpen,
        uri: Container()));
    list.add(Itens(
        title: 'Item 02',
        icon: FontAwesomeIcons.addressBook,
        uri: Container()));
  }
  Widget geturi() => this.uri;
}